/* width, height, max-width, min-width, max-height, min-height, 
padding, padding-top, padding-right, padding-bottom, padding-left,
border, border-width, border-style, border-color, border-radius,
margin, margin-top, margin-right, margin-bottom, margin-left, display, box-sizing */



Everything in CSS is a box, and understanding these boxes is crucial for creating complex layouts and aligning items. In CSS, there are two types of boxes: block boxes and inline boxes. The box type determines how the element interacts with other elements on the page and in the page's flow. Boxes have two display types: outer display type and inner display type.

Outer display type:

If a box has an outer display type of block(display: block;), then,

- The box will break onto a new line.
- If width is not specified, the box will extend in the inline direction to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.
- The width and height properties are respected. If width and height are specified, the element will size itself accordingly; otherwise, it expands horizontally to fill its container and vertically according to its content.
- Padding, margin and border will cause other elements to be pushed away from the box.

.block-box {
  display: block;
  width: 200px;
  border: 1px solid;
}

display: block, is the default value for the following elements:
<div>, <h1>-<h6>, <p>, <ul>, <ol>, <li>, <table>, <footer>, <form>, <header>, <hr>, <section>, <video>


If a box has an outer display type of inline(display: inline;), then,

- The box will not break onto a new line.
- The width and height properties will not apply.
- Top and bottom padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.
- Left and right padding, margins, and borders will apply, causing other inline boxes to move away from the box.

.inline-box {
  display: inline;
  border: 1px solid;
  padding: 5px;
}

display: inline, is the default value to the following elements:  
<img>, <a>, <span>, <input>, <be>, <button>, <em>, <I>, <b>, <map>, <output>


Inner display type:
The inner display type defines how the contents inside a box are laid out. It complements the outer display type, which determines how the element itself behaves in relation to other elements. The inner display type controls the layout behaviour of the children (elements inside the container). In normal flow, block-level elements (like div, p) stack vertically, while inline-level elements (like span, a) flow horizontally within their container. By changing the inner display type, such as using display: flex; or display: grid;, we can modify how child elements are laid out.

Setting display: flex on a container changes the inner display type to flex, making its direct children flex items. This means:
- Children are laid out in a flexible, predictable way, either in a row or a column (depending on the flex direction).
- Flexbox allows control over alignment, spacing, and size distribution of child elements, all without affecting the outer block or inline behaviour.

.flex-container {
  display: flex; /* Outer display type is still block, but the inner becomes flex */
}

With display: grid, the inner display type becomes grid. This enables you to lay out child elements in a two-dimensional grid (rows and columns). It offers fine control over positioning and spacing within a grid.

.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 3 equal-width columns */
}
/* The .grid-container remains a block-level element, but the inner layout of its children is controlled by the grid system. */


Setting display: inline-flex makes the outer display type inline, while the inner display type becomes flex. This means:
- The element behaves as an inline element in the document flow (it won’t break onto a new line).
- The child elements inside it follow Flexbox layout rules.

.inline-flex-container {
  display: inline-flex; /* Behaves inline, but children are laid out in flexbox */
}

Setting display: inline-grid makes the outer display type inline, while the inner display type becomes grid.

.inline-grid-container {
  display: inline-grid;
  grid-template-rows: repeat(2, auto); /* 2 rows */
}
-------------------------------------------------------------------------------------------------------------------------

What is the CSS box model?
The CSS box model as a whole applies to block boxes and defines how the different parts of a box — margin, border, padding, and content — work together to create a box that you can see on a page. Inline boxes use just some of the behaviour defined in the box model


Parts of a box:-
Content box: This is the area where the actual content (text, images, etc.) of the element is displayed. The dimensions can be defined using properties like width, height, inline-size, or block-size.

Padding box: The padding is the space between the content and the border. It acts as a buffer around the content, providing white space that enhances readability. Padding can be set using the padding property.

Border box: The border surrounds the padding (if any) and the content. It can be styled with properties such as border, border-width, border-style, and border-color.

Margin box: The margin is the outermost layer, creating space between the element and surrounding elements. It can be adjusted using the margin property. Margins are transparent and do not have any colour.

Types of Box Models in CSS:
There are two kinds of box models in CSS, the standard and alternate model.

The standard CSS box model:-
In this model, the width and height properties define the size of the content box only. Padding and borders are added to the specified dimensions to determine the total size of the box. This model is implemented by default with box-sizing: content-box.

Here,
width: width + padding-left + padding-right + border-left + border-right
height: height + padding-top + padding-bottom + border-top + border-bottom

.box {
  width: 350px;
  height: 150px;
  margin: 10px;
  padding: 25px;
  border: 5px solid black;
}

Here, the actual space taken up by the box will be 410px wide (350 + 25 + 25 + 5 + 5) and 210px high (150 + 25 + 25 + 5 + 5).
Point to be noted that the margin is not counted towards the actual size of the box — it affects the total space that the box will take up on the page, but only the space outside the box. The box's area stops at the border — it does not extend into the margin.

Note:
=====
- When you don’t specify a width for a box in CSS with static or relative positioning, it automatically expands to fill 100% of its parent’s width. However, adding padding and borders will push the content inward, effectively reducing the space available for the actual content. Conversely, if you explicitly set the box's width to 100%, it will still fill the parent's width, but the added padding and borders will push the box outward, causing it to exceed the parent’s width. For instance, a box with a width of 100%, 20px of padding on each side, and a 5px border will take up 150% of the parent's width in total.
This behaviour is particularly significant for <textarea> elements, which require a defined width to properly function with their "cols" attribute. Setting a <textarea> to 100% width can result in padding causing it to overflow, and complicating responsive designs. Therefore, in certain scenarios, using fixed pixel widths may be more effective in ensuring proper layout and usability. Understanding the interaction between width, padding, and borders is essential for creating fluid and user-friendly designs.

- Absolutely positioned boxes in CSS behave differently when no width is set. Instead of expanding to fill the parent container, they only grow as wide as the content inside them. For example, if a box contains a single word, its width matches that word. If more text is added, the box expands accordingly until it reaches 100% of the parent's width (the nearest parent with relative positioning or the browser window), at which point it will start wrapping the content.
This horizontal expansion can feel unusual since we typically expect boxes to grow vertically to fit their content. Additionally, different browsers might handle this behavior inconsistently due to variations in how they render text. Therefore, it's essential to understand how absolutely positioned boxes work to maintain a consistent layout across different platforms.

------------------------------------------------------------------------------------------------------------

Width:
The width property sets the width of an element. By default, it sets the width of the content area i.e., the width of an element does not include padding, borders, or margins!
values: <length> values, <percentage> value, max-content, min-content, fit-content, auto(default)

max-content -->  Imagine you have a box, and you want to stretch it as much as possible without letting its content overflow or wrap onto the next line. Max-content does just that. It expands the box to fit the widest part of its content without causing overflow.

min-content --> Now, let's say you have another box, and you want it to shrink down as much as possible without squishing its content or forcing it to wrap onto a new line. That's min-content. It collapses the box to fit the smallest width required by its content.

fit-content --> This is like finding a balance between max-content and min-content. Fit-content allows the box to expand to fit its widest content up to a certain limit, which is defined by the containing element's width or any specified max-width. It's flexible but won't exceed the specified maximum width.

auto --> When you set width to auto, the browser decides the width for you. For block-level elements, it usually takes up the available width in its container. For inline-level elements, it's often based on the content's natural width unless there are constraints like floating or absolute positioning.

The specified value of width applies to the content area so long as its value remains within the values defined by min-width and max-width.
- If the value for width is less than the value for min-width, then min-width overrides width.
- If the value for width is greater than the value for max-width, then max-width overrides width.

------------------------------------------------------------------------------------------------------------

Height:
The height property sets the height of an element. By default, the property defines the height of the content area i.e., of an element does not include padding, borders, or margins!
values: <length> values, <percentage> value, max-content, min-content, fit-content, auto(default)

Max-width & Min-width:
The max-width CSS property sets the maximum width of an element. It prevents the used value of the width property from becoming larger than the value specified by max-width.
The min-width CSS property sets the minimum width of an element. It prevents the used value of the width property from becoming smaller than the value specified for min-width.
max-width overrides width, but min-width overrides max-width.
values: <length> values, <percentage> value, max-content, min-content, fit-content, auto

Max-height & Min-height:
The max-height CSS property sets the maximum height of an element. It prevents the used value of the height property from becoming larger than the value specified by max-height.
The min-height CSS property sets the minimum height of an element. It prevents the used value of the height property from becoming smaller than the value specified for min-height.
max-height overrides height, but min-height overrides max-height.
values: <length> values, <percentage> value, max-content, min-content, fit-content, auto

------------------------------------------------------------------------------------------------------------

Margin:
The margin is an invisible space around your box. It pushes other elements away from the box. Margins can have positive or negative values. Setting a negative margin on one side of your box can cause it to overlap other things on the page. Whether you are using the standard or alternative box model, the margin is always added after the size of the visible box has been calculated.
CSS properties: margin, margin-top, margin-right, margin-bottom, margin-left
Values: <length>, <percentage>, auto(browser selects a suitable margin to use. For example, in certain cases this value can be used to center an element)
Point to be noted here that text-align: center; centers the content whereas margin: auto;
centers the entire element inside the parent container horizontally.

margin: 5px; // Apply to all sides of the box
margin: 5% auto; // top and bottom | left and right
margin: 1em auto 2em; // top | left and right | bottom
margin: 2px 1em 0 auto; // top | right | bottom | left (clockwise)

Depending on whether two elements whose margins touch have positive or negative margins, the results will be different:
- Two positive margins will combine to become one margin. Its size will be equal to the largest individual margin (or just one of them, if they are equal).
- Two negative margins will collapse and the smallest (furthest from zero) value will be used.
- If one margin is negative, its value will be subtracted from the total.
(Note that the margins of floating and absolutely positioned elements never collapse)

------------------------------------------------------------------------------------------------------------

Borders:
The border is drawn between the margin and the padding of a box. If you are using the standard box model, the size of the border is added to the width and height of the content box.
For styling borders, there are a large number of properties — there are four borders, and each border has a style, width, and color that we might want to manipulate.
CSS properties: border: [width style color --> 1px solid red]
We can also give borders individually to all the diiferent sides using border-top, border-right, 
border-bottom, border-left. 
border is a shorthand property of border-width, border-style, and border-color.

border-width: thin/medium/thick/<length> values; (Applied to all the four sides)
border-width: 2px 1.5em; /* top and bottom | left and right */
border-width: 1px 2em 1.5cm; /* top | left and right | bottom */
border-width: 1px 2em 0 4rem; /* top | right | bottom | left */
(border-top-width, border-right-width, border-bottom-width, border-left-width)


border-style: none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset; (Applied to all the four sides)
border-style: dotted solid; /* top and bottom | left and right */
border-style: hidden double dashed;  /* top | left and right | bottom */
border-style: none solid dotted dashed;  /* top | right | bottom | left */
(border-top-style, border-right-style, border-bottom-style, border-left-style)


border-color: red; (Applied to all the four sides)
border-color: red #f015ca;  /* top and bottom | left and right */
border-color: red rgb(240 30 50 / 70%) green;  /* top | left and right | bottom */
border-color: red yellow green blue; /* top | right | bottom | left */
(border-top-color, border-right-color, border-bottom-color, border-left-color)

------------------------------------------------------------------------------------------------------------

Border-radius:
The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners. The radius applies to the whole background, even if the element has no border;
values: <length> values, <percentage> value

border-radius: 10px; /* Radius is set for all 4 sides */
border-radius: 10px 5%; /* top-left-and-bottom-right | top-right-and-bottom-left */
border-radius: 2px 4px 2px; /* top-left | top-right-and-bottom-left | bottom-right */
border-radius: 1px 0 3px 4px; /* top-left | top-right | bottom-right | bottom-left */
(border-top-left-radius, border-top-right-radius, border-bottom-right-radius, border-bottom-left-radius)

------------------------------------------------------------------------------------------------------------


Padding:
The padding sits between the border and the content area and is used to push the content away from the border. Unlike margins, you cannot have a negative padding. Any background applied to your element will display behind the padding.
CSS Properties: padding, padding-top, padding-right, padding-bottom, padding-left
Values: <length>, <percentage>

padding: 5px; // Apply to all sides of the box
padding: 5% auto; // top and bottom | left and right
padding: 1em auto 2em; // top | left and right | bottom
padding: 2px 1em 0 auto; // top | right | bottom | left (clockwise)


All of the above fully applies to block boxes. Some of the properties can apply to inline boxes too, such as those created by a <span> element. In the example below, we have a <span> inside a paragraph. We have applied a width, height, margin, border, and padding to it. You can see that the width and height are ignored. The top and bottom margin, padding, and border are respected but don't change the relationship of other content to our inline box. The padding and border overlap other words in the paragraph. The left and right padding, margins, and borders move other content away from the box.

span {
  margin: 20px;
  padding: 20px;
  width: 80px;
  height: 50px;
  background-color: lightblue;
  border: 2px solid blue;
}

<p>
  I am a paragraph and this is a <span>span</span> inside that paragraph. A span is an inline element and so does not respect width and height.
</p>

------------------------------------------------------------------------------------------------------------


display: inline-block:-

display: inline-block; is a special value of display, which provides a middle ground between inline and block. Use it if you do not want an item to break onto a new line, but do want it to respect width and height and avoid the overlapping seen above.

For an element with display: inline-block, 
- The width and height properties are respected.
- padding, margin, and border will cause other elements to be pushed away from the box.
- It does not, however, break onto a new line, and will only become larger than its content if you explicitly add width and height properties.

Where this can be useful is when we want to give a link a larger hit area by adding padding. <a> is an inline element like <span>; we can use display: inline-block to allow padding to be set on it, making it easier for a user to click the link.


------------------------------------------------------------------------------------------------------------

display: none:-

The display: none; property in CSS is a way to completely hide an element from the webpage. 
When applied to an element, it removes it from the document flow, meaning it doesn't take 
up any space on the page as if it were never there. When we apply display: none; to a 
parent element, all of its child elements are also hidden, regardless of their individual 
display properties. While display: none; effectively hides elements, it doesn't remove them 
from the DOM.  Elements with display: none; cannot be interacted with. They are effectively 
"disabled" and cannot be clicked on, hovered over, or selected by the user.


------------------------------------------------------------------------------------------------------------

